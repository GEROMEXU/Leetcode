class Solution1 {
public:
	bool backspaceCompare(string S, string T) {
		stack<char> s1;
		stack<char> s2;
		bool flag = true;

		int i = 0, j = 0;
		while (i < S.length())
		{
			if (S[i] == '#' && !s1.empty())
			{
				s1.pop();
			}
			else if(S[i] != '#')
			{
				s1.push(S[i]);
			}
			i++;
		}

		while (j < T.length())
		{
			if (T[j] == '#' && !s2.empty())
			{
				s2.pop();
			}
			else if (T[j] != '#')
			{
				s2.push(T[j]);
			}
			j++;
		}
		if (s1.size() == s2.size())
		{
			while (!s1.empty() && !s2.empty())
			{
				if (s1.top() == s2.top())
				{
					s1.pop();
					s2.pop();
				}
				else
				{
					flag = false;
					break;
				}
			}
			return flag;
		}
		else
		{
			flag = false;
			return flag;
		}
	}
};
class Solution2 {
public:
	bool backspaceCompare(string S, string T) {
		int i = S.length() - 1, j = T.length() - 1;
		while (1) {
			for (int back = 0; i >= 0 && (back || S[i] == '#'); --i)
				back += S[i] == '#' ? 1 : -1;
			for (int back = 0; j >= 0 && (back || T[j] == '#'); --j)
				back += T[j] == '#' ? 1 : -1;
			if (i >= 0 && j >= 0 && S[i] == T[j])
				i--, j--;
			else
				return i == -1 && j == -1;
		}
	}
};
第二个方法是从后往前对比，遇到一个#，back就+1，如果back不为0，就跳过一个进行对比，然后back-1.
当back为0的时候，S[i]和T[j]进行对比。
